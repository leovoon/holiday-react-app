{"version":3,"sources":["App.js","useFetchHook.js","serviceWorker.js","index.js","logo.svg"],"names":["require","config","App","date","Date","year","getFullYear","month","getMonth","day","getDate","url","useState","data","loading","state","setState","useEffect","fetch","then","response","json","holidays","useFetch","process","className","style","color","role","aria-labelledby","src","logo","alt","format","position","bottom","left","undefined","name","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yQAKAA,EAAQ,IAAUC,SAqCHC,MAlCf,WACE,IAAMC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UAJJ,ECNS,SAAAC,GAAQ,IAAD,EACHC,mBAAS,CAAEC,KAAM,KAAMC,SAAS,IAD7B,mBACtBC,EADsB,KACfC,EADe,KAY7B,OATAC,qBAAU,WACRD,GAAS,SAAAD,GAAK,MAAK,CAAEF,KAAME,EAAMF,KAAMC,SAAS,MAChDI,MAAMP,GACHQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAN,GACJG,EAAS,CAAEH,KAAMA,EAAKO,SAASE,SAAUR,SAAS,SAErD,CAACH,EAAKK,IAEFD,EDGuBQ,CAJrB,4FACuEC,2CADvE,4BACgInB,EADhI,kBAC8IE,EAD9I,gBAC2JE,IAG5Ja,EATK,EASLA,SAAUR,EATL,EASKA,QAKlB,OAEE,yBAAKW,UAAU,OAEb,4BAAQA,UAAU,cAClB,uCACE,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,WADF,OACuD,0BAAMC,KAAK,MAAMC,kBAAgB,oBAAjC,6BACrD,yBAAKC,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACvC,kBAAC,IAAD,CAAQ7B,KAAMA,EAAM8B,OAAO,gBAAgBP,MAAO,CAACQ,SAAU,WAAYC,OAAQ,OAAQC,KAAM,UAE/FtB,EAEA,yCAAc,0BAAMc,KAAK,MAAMC,kBAAgB,oBAAjC,sBAFSQ,IAAbf,EACR,sDAAkC,6BAAK,4BAAKA,EAAS,GAAGgB,MAAU,+BAAQhB,EAAS,GAAGiB,iBErB9EC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.6113f05e.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport Moment from \"react-moment\";\nimport { useFetch } from \"./useFetchHook\";\nrequire('dotenv').config()\n\n\nfunction App() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const url = `\n  https://cors-anywhere.herokuapp.com/calendarific.com/api/v2/holidays?&api_key=${process.env.REACT_APP_NOT_SECRET_CODE}&country=MY&year=${year}&month=${month}&day=${day}`;\n\n  \n  const { holidays, loading } = useFetch(url);\n\n\n\n\n  return (\n\n    <div className='App'>\n    \n      <header className='App-header'>\n      <h1 >\nToday's <span style={{ color: \"#ca85fd\" }}>Holiday</span> in <span role=\"img\" aria-labelledby=\"checking holiday\" >ðŸ‡²ðŸ‡¾</span></h1>\n        <img src={logo} className='App-logo' alt='logo' />\n          <Moment date={date} format='DD  MMMM YYYY' style={{position: 'relative', bottom: '30px', left: '60px' }} />\n\n        {!loading ? holidays === undefined \n          ? <h2>Today isn't a holiday.</h2> : <div><h2>{holidays[0].name}</h2><small>{holidays[0].description}</small></div> :\n          <h2>Checking..<span role=\"img\" aria-labelledby=\"checking holiday\" >ðŸ’­</span></h2>\n          \n          }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetch = url => {\r\n  const [state, setState] = useState({ data: null, loading: true });\r\n\r\n  useEffect(() => {\r\n    setState(state => ({ data: state.data, loading: true }));\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setState({ data: data.response.holidays, loading: false });\r\n      });\r\n  }, [url, setState]);\r\n\r\n  return state;\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.b2e431c3.svg\";"],"sourceRoot":""}